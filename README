Omeka OAI-PMH Repository Plugin
===============================

This plugin exposes the metadata of Omeka items using the Open Archives
Initiative Protocol for Metadata Harvesting (OAI-PMH). 

Some information in this file assumes you have some familiarity with OAI-PMH.
Information is available at <http://www.openarchives.org>.

REQUIREMENTS
============

* Omeka version 1.0alpha or greater
* PHP with the DOM extension installed (this is likely already true)

INSTALLATION
============

The directory this file (along with the rest of the plugin) is contained in MUST
be named "OaiPmhRepository" for the plugin to function correctly.

1. Place the OaiPmhRepository directory in the Omeka plugins directory.
2. Log in to the Omeka admin interface, and go to Manage Plugins.
3. Click the "Install" button for the OAI-PMH Repository plugin.

CONFIGURATION
=============

This plugin has several user-configurable values.  You will be prompted to set
these at installation time, or you can change them at any time from the
Configure link on the plugin management page.

* Repository name
    
    Name for this OAI-PMH repository.  This value is sent as part of the reponse
    to an Identify request, and it is how the repository will be identified by
    well-behaved harvesters.
    
    Default: The name of the Omeka installation.

* Namespace identifier
    
    The oai-identifier specification requires repositories to specify a
    namespace identifier. This will be used to form globally unique IDs for the
    exposed metadata items. This value is required to be a domain name you have
    registered. Using other values will generate invalid identifiers.
    
    Default: "default.must.change"   This is itended to be a not-so-subtle hint
        that the default value is inappropriate. The plugin will function with
        this, or any other string, as the namespace identifier, but this breaks
        the assumption that each identifier is globally unique.
        
    Best practice is to set this value to the domain name the Omeka server is
    published at, possibly with a prefix like "oai."

* List response limit

    Number of individual items that can be returned in a response at once. 
    Larger values will increase memory usage but reduce the number of database
    queries and HTTP requests. Smaller values will reduce memory usage but
    increase the number of DB queries and requests.
    
    Default: 50
    
* List expiration time

    Amount of time in minutes a resumptionToken is valid for. The specification
    suggests a number in the tens of minutes.  This boils down to the length of
    time a harvester has to request the next part of an incomplete list request.
    
    Default: 10 (minutes)
    
COPYING
=======

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Specifically, the text of the GPL should be contained in a file named COPYING in
the plugin's root directory.

DEVELOPMENT AND DISTRIBUTION
============================

Information on development and releases is published on the Omeka Dev mailing
list <http://groups.google.com/group/omeka-dev>

The source for the plugin is available via Web and Subversion at
<https://omeka.org/svn/plugins/OaiPmhRepository>

SVN trunk holds the most up-to-date code, and is available at
<https://omeka.org/svn/plugins/OaiPmhRepository/trunk>

EXTENDING THE PLUGIN
====================

This plugin is designed to allow output to arbitrary metadata formats.  To add
a new format, add a new file to libraries/OaiPmhRepository/Metadata/, and in
the file declare a class extending OaiPmhRepository_Metadata_Abstract.  The only
function you must declare is appendRecord, which appends the appropriate XML to
the response.  The plugin ships with one subclass, in OaiDc.php.  Use it as a
helpful example.

Important notes:
* The class name should be in the OaiPmhRepository_Metadata hierarchy
* The class name must match the file name (i.e., if you create a class
  OaiPmhRepository_Metadata_Foo, the filename must be Foo.php
* You must be sure to copy the initial variable declarations from OaiDc.php, and
  edit them to suit your metadata format.
    
AUTHORS
=======

John Flatness <jflatnes@vt.edu>
Yu-Hsun Lin <oceanl@vt.edu>
